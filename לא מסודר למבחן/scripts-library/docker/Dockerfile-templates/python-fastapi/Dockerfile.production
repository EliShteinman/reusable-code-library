# scripts-library/docker/Dockerfile-templates/python-fastapi/Dockerfile.production
# Advanced Multi-stage Dockerfile based on exam solution patterns
# Features: Security, Performance, Size Optimization

# Stage 1: Build stage with dependencies
FROM python:3.11-slim as builder

ARG BUILD_DATE
ARG GIT_COMMIT
ARG VERSION=1.0.0

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-slim as production

ARG VERSION
ARG BUILD_DATE
ARG GIT_COMMIT

LABEL maintainer="Your Team <team@company.com>" \
      version="${VERSION}" \
      description="Advanced FastAPI Service" \
      build-date="${BUILD_DATE}" \
      git-commit="${GIT_COMMIT}"

# --- GENERIC RUNTIME CONFIGURATION ---
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/home/appuser/.local/bin:$PATH" \
    PORT=8080 \
    # TODO: Override these variables in your deployment (e.g., Kubernetes YAML) or at build time.
    APP_MODULE="my_app.main" \
    APP_VARIABLE="app" \
    WORKERS_COUNT="1"

RUN groupadd -r appuser && useradd -r -g appuser appuser && mkdir -p /home/appuser && chown -R appuser:appuser /home/appuser
RUN apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/* && apt-get clean
WORKDIR /app
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# TODO: Adjust the source path to match your project structure. Example: ./my_project
COPY --chown=appuser:appuser ./my_app /app/my_app

RUN mkdir -p /app/logs && chown -R appuser:appuser /app/logs
USER appuser

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

EXPOSE ${PORT}

# Generic command to run the application using ENV variables
CMD ["uvicorn", "${APP_MODULE}:${APP_VARIABLE}", "--host", "0.0.0.0", "--port", "8080", "--workers", "${WORKERS_COUNT}"]