# kubernetes-templates/databases/mongodb/deployment-complete.yaml
# MongoDB Standard Deployment Template
# Suitable for development and simple production environments

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-mongo-config
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
data:
  MONGO_INITDB_ROOT_USERNAME: "mongoadmin"
  MONGO_DB_NAME: "${DATABASE_NAME}"
  MONGO_COLLECTION_NAME: "${COLLECTION_NAME}"
  MONGO_INITDB_DATABASE: "${DATABASE_NAME}"

---
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-mongo-credentials
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
type: Opaque
stringData:
  MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${APP_NAME}-mongo-pvc
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "${STORAGE_CLASS}"
  resources:
    requests:
      storage: ${STORAGE_SIZE}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-mongo-deployment
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "${MONGO_VERSION}"
spec:
  replicas: 1  # Single replica for Deployment
  strategy:
    type: Recreate  # Important for persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: mongo
      app.kubernetes.io/instance: ${APP_NAME}-mongo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongo
        app.kubernetes.io/instance: ${APP_NAME}-mongo
        app.kubernetes.io/part-of: ${APP_NAME}
        app.kubernetes.io/component: database
      annotations:
        # Force pod restart on config changes
        config/checksum: "${CONFIG_CHECKSUM}"
    spec:
      serviceAccountName: ${APP_NAME}-mongo-serviceaccount
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      terminationGracePeriodSeconds: 30
      containers:
      - name: mongo
        image: mongo:${MONGO_VERSION}
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: ${APP_NAME}-mongo-config
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP_NAME}-mongo-credentials
              key: MONGO_INITDB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: ${APP_NAME}-mongo-config
              key: MONGO_INITDB_DATABASE
        args:
        - --auth
        - --bind_ip_all
        resources:
          requests:
            cpu: "${MONGO_CPU_REQUEST}"
            memory: "${MONGO_MEMORY_REQUEST}"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "${MONGO_CPU_LIMIT}"
            memory: "${MONGO_MEMORY_LIMIT}"
            ephemeral-storage: "2Gi"
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        - name: mongo-init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                mongosh --eval "db.adminCommand('shutdown')"
      volumes:
      - name: mongo-persistent-storage
        persistentVolumeClaim:
          claimName: ${APP_NAME}-mongo-pvc
      - name: mongo-init-scripts
        configMap:
          name: ${APP_NAME}-mongo-init-scripts
          defaultMode: 0755
      initContainers:
      - name: mongo-init-permissions
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          chown -R 999:999 /data/db
          chmod 755 /data/db
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        securityContext:
          runAsUser: 0

---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-mongo-service
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${APP_NAME}-mongo-serviceaccount
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-mongo-init-scripts
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
data:
  init-database.js: |
    // MongoDB initialization script for Deployment
    // This runs when the database is first created
    
    // Switch to the application database
    db = db.getSiblingDB(process.env.MONGO_INITDB_DATABASE || 'mydatabase');
    
    // Create application user if it doesn't exist
    if (!db.getUser(process.env.MONGO_INITDB_ROOT_USERNAME)) {
      db.createUser({
        user: process.env.MONGO_INITDB_ROOT_USERNAME,
        pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
        roles: [
          { role: "readWrite", db: process.env.MONGO_INITDB_DATABASE },
          { role: "dbAdmin", db: process.env.MONGO_INITDB_DATABASE }
        ]
      });
      print('Created application user: ' + process.env.MONGO_INITDB_ROOT_USERNAME);
    }
    
    // Create initial collection if specified
    if (process.env.MONGO_COLLECTION_NAME) {
      db.createCollection(process.env.MONGO_COLLECTION_NAME);
      print('Created collection: ' + process.env.MONGO_COLLECTION_NAME);
      
      // Insert sample data for development/testing
      if (process.env.NODE_ENV !== 'production') {
        db[process.env.MONGO_COLLECTION_NAME].insertMany([
          {
            ID: 1,
            first_name: "John",
            last_name: "Doe", 
            phone_number: 5551234,
            rank: "Private",
            created_at: new Date()
          },
          {
            ID: 2,
            first_name: "Jane",
            last_name: "Smith",
            phone_number: 5555678,
            rank: "Corporal",
            created_at: new Date()
          }
        ]);
        print('Inserted sample data');
      }
    }
    
    // Create indexes for better performance
    db[process.env.MONGO_COLLECTION_NAME].createIndex(
      { "ID": 1 }, 
      { unique: true, name: "unique_id_index" }
    );
    print('Created unique index on ID field');

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ${APP_NAME}-mongo-netpol
  labels:
    app.kubernetes.io/name: mongo
    app.kubernetes.io/instance: ${APP_NAME}-mongo
    app.kubernetes.io/part-of: ${APP_NAME}
    app.kubernetes.io/component: database
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: mongo
      app.kubernetes.io/instance: ${APP_NAME}-mongo
  policyTypes:
  - Ingress
  ingress:
  # Allow traffic from application pods only
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: ${APP_NAME}
          app.kubernetes.io/component: api
    ports:
    - protocol: TCP
      port: 27017