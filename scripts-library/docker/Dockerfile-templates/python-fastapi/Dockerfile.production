# scripts-library/docker/Dockerfile-templates/python-fastapi/Dockerfile.production
# Advanced Multi-stage Dockerfile based on exam solution patterns
# Features: Security, Performance, Size Optimization

# Stage 1: Build stage with dependencies
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG GIT_COMMIT
ARG VERSION=1.0.0

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies needed for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-slim as production

# Set build metadata
LABEL maintainer="Your Team <team@company.com>" \
      version="${VERSION}" \
      description="Advanced FastAPI MongoDB Service" \
      build-date="${BUILD_DATE}" \
      git-commit="${GIT_COMMIT}"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/home/appuser/.local/bin:$PATH" \
    PORT=8080

# Create non-root user for security
RUN groupadd -r appuser && \
    useradd -r -g appuser appuser && \
    mkdir -p /home/appuser && \
    chown -R appuser:appuser /home/appuser

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Copy installed packages from builder stage
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# Copy application code with proper ownership
COPY --chown=appuser:appuser ./services /app/services
COPY --chown=appuser:appuser ./requirements.txt /app/

# Create logs directory
RUN mkdir -p /app/logs && chown -R appuser:appuser /app/logs

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE ${PORT}

# Command to run the application
CMD ["uvicorn", "services.data_loader.main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]

# Multi-stage build for development
FROM production as development

USER root

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    vim \
    && rm -rf /var/lib/apt/lists/*

USER appuser

# Development command with auto-reload
CMD ["uvicorn", "services.data_loader.main:app", "--host", "0.0.0.0", "--port", "8080", "--reload"]

# Distroless variant for maximum security
FROM gcr.io/distroless/python3-debian11 as distroless

# Copy from builder stage
COPY --from=builder /root/.local /home/appuser/.local
COPY --chown=appuser:appuser ./services /app/services

WORKDIR /app
EXPOSE 8080

ENV PYTHONPATH="/home/appuser/.local/lib/python3.11/site-packages:/app"

CMD ["services.data_loader.main:app"]